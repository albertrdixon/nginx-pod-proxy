map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

map $http_upgrade $proxy_connection {
  default upgrade;
  ''      'close';
}

map $proxy_host $tll_host {
    {{ if has_key .Env "HOST" }}default "{{ .Env.HOST }}";
    {{ else }}default $http_host;
    '' $host;{{ end }}
}

upstream app {
  server {{ .Env.UPSTREAM_HOST }}:{{ .Env.UPSTREAM_PORT }} max_fails=1 fail_timeout=3s;
}

server {
  listen {{ .Env.LISTEN_PORT }};
  server_name _;

{{ if eql .Env.FORCE_SSL "on" }}
  if ($http_x_forwarded_proto = 'http') {
    return 301 https://$proxy_host$request_uri;
  }
{{ end }}

  location / {
{{ if (and (has_key .Env "BASIC_AUTH_USER") (has_key .Env "BASIC_AUTH_PASSWD"))}}
    auth_basic "protected";
    auth_basic_user_file /etc/nginx/auth.basic;{{ end }}

    proxy_http_version          1.1;
    proxy_buffering             off;
    proxy_redirect              off;
    proxy_pass_request_headers  on;
    proxy_cache                 off;

    proxy_set_header Host $proxy_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_set_header X-Forwarded-Host $proxy_host;

    proxy_pass http://app;
  }
}

{{ path "/etc/nginx/conf.d" }}